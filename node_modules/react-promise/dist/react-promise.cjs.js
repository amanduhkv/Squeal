'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var statusTypes = {
  none: 'none',
  pending: 'pending',
  rejected: 'rejected',
  resolved: 'resolved'
};

var Async = function (_React$Component) {
  _inherits(Async, _React$Component);

  function Async(props) {
    _classCallCheck(this, Async);

    var _this = _possibleConstructorReturn(this, (Async.__proto__ || Object.getPrototypeOf(Async)).call(this, props));

    _this.state = {
      status: statusTypes.none
    };
    return _this;
  }

  _createClass(Async, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nP) {
      if (nP.promise !== this.props.promise) {
        this.setState({
          status: statusTypes.none
        });
        this.handlePromise(nP.promise);
      }
    }
  }, {
    key: 'handlePromise',
    value: function handlePromise(prom) {
      var _this2 = this;

      this.setState({
        status: statusTypes.pending
      });
      prom.then(function (res) {
        _this2.setState({
          status: statusTypes.resolved,
          value: res
        });
      }, function (err) {
        _this2.setState({
          status: statusTypes.rejected,
          value: err
        });
      });
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.props.promise) {
        this.handlePromise(this.props.promise);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props,
          state = this.state;


      switch (state.status) {
        case statusTypes.none:
          if (props.before) {
            return props.before(this.handlePromise.bind(this));
          }
          break;
        case statusTypes.pending:
          if (props.pending) {
            return props.pending;
          }
          break;
        case statusTypes.resolved:
          if (props.then) {
            return props.then(state.value);
          }
          break;
        case statusTypes.rejected:
          if (props.catch) {
            return props.catch(state.value);
          }
          break;
      }

      return null;
    }
  }]);

  return Async;
}(React.Component);

Async.propTypes = {
  before: PropTypes.func, // renders it's return value before promise is handled
  then: PropTypes.func, // renders it's return value when promise is resolved
  catch: PropTypes.func, // renders it's return value when promise is rejected
  pending: PropTypes.node, // renders it's value when promise is pending
  promise: PropTypes.object // promise itself
};

module.exports = Async;
